---
export interface Props {
  title?: string;
  description?: string;
  image?: string;
  canonical?: string;
}

const { 
  title = "Eyal Mizrahi - Full Stack Developer",
  description = "Full Stack Developer with 6+ years of experience in Java, Spring, Node.js, React, and cloud platforms. Specializing in microservices, REST APIs, and scalable applications.",
  image = "/og-image.jpg",
  canonical = Astro.url.href
} = Astro.props;

const siteName = "Eyal Mizrahi";
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonical} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    <meta property="og:site_name" content={siteName} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonical} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />
    
    <!-- Additional Meta Tags -->
    <meta name="author" content="Eyal Mizrahi" />
    <meta name="keywords" content="Full Stack Developer, Java, Spring, Node.js, React, TypeScript, Microservices, Cloud, AWS, OpenShift, Tel Aviv, Israel" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet" />
    
    <title>{title}</title>
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-white antialiased" dir={Astro.url.searchParams.get('rtl') === '1' ? 'rtl' : 'ltr'}>
    <slot />
    
    <!-- Dark mode toggle script -->
    <script>
      // Check for saved theme preference or default to 'light'
      const theme = localStorage.getItem('theme') || 'light';
      
      // Apply theme on page load
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      }
      
      // Theme toggle function
      function toggleTheme() {
        const html = document.documentElement;
        const isDark = html.classList.contains('dark');
        
        if (isDark) {
          html.classList.remove('dark');
          localStorage.setItem('theme', 'light');
        } else {
          html.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        }
        
        // Update theme icon
        updateThemeIcon();
      }
      
      // Update theme icon based on current theme
      function updateThemeIcon() {
        const themeToggle = document.getElementById('theme-toggle');
        const isDark = document.documentElement.classList.contains('dark');
        
        if (themeToggle) {
          themeToggle.innerHTML = isDark ? '‚òÄÔ∏è' : 'üåô';
        }
      }
      
      // Initialize theme icon
      document.addEventListener('DOMContentLoaded', updateThemeIcon);
      
      // Make toggleTheme available globally
      window.toggleTheme = toggleTheme;

      // Simple i18n direction toggle via query param (?rtl=1)
      (function applyDirectionFromQuery(){
        try {
          const params = new URLSearchParams(window.location.search);
          const rtl = params.get('rtl');
          if (rtl === '1') {
            document.body.setAttribute('dir', 'rtl');
          }
        } catch {}
      })();
    </script>
    
    {import.meta.env.PUBLIC_GA_ID && (
      <script async src={`https://www.googletagmanager.com/gtag/js?id=${import.meta.env.PUBLIC_GA_ID}`}></script>
    )}
    {import.meta.env.PUBLIC_GA_ID && (
      <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', '{import.meta.env.PUBLIC_GA_ID}');
      </script>
    )}
  </body>
</html>

<style is:global>
  :root {
    --primary-50: #eff6ff;
    --primary-100: #dbeafe;
    --primary-200: #bfdbfe;
    --primary-300: #93c5fd;
    --primary-400: #60a5fa;
    --primary-500: #3b82f6;
    --primary-600: #2563eb;
    --primary-700: #1d4ed8;
    --primary-800: #1e40af;
    --primary-900: #1e3a8a;
  }
  
  .dark {
    --primary-50: #1e3a8a;
    --primary-100: #1e40af;
    --primary-200: #1d4ed8;
    --primary-300: #2563eb;
    --primary-400: #3b82f6;
    --primary-500: #60a5fa;
    --primary-600: #93c5fd;
    --primary-700: #bfdbfe;
    --primary-800: #dbeafe;
    --primary-900: #eff6ff;
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: #f1f5f9;
  }
  
  ::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
  
  .dark ::-webkit-scrollbar-track {
    background: #1e293b;
  }
  
  .dark ::-webkit-scrollbar-thumb {
    background: #475569;
  }
  
  .dark ::-webkit-scrollbar-thumb:hover {
    background: #64748b;
  }
  
  /* Smooth transitions */
  * {
    transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;
  }
  
  /* Focus styles */
  *:focus {
    outline: 2px solid var(--primary-500);
    outline-offset: 2px;
  }
  
  /* Typography improvements */
  .prose {
    color: #374151;
  }
  
  .dark .prose {
    color: #d1d5db;
  }
  
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    color: #111827;
    font-weight: 600;
  }
  
  .dark .prose h1, .dark .prose h2, .dark .prose h3, .dark .prose h4, .dark .prose h5, .dark .prose h6 {
    color: #f9fafb;
  }
  
  .prose a {
    color: var(--primary-600);
    text-decoration: none;
  }
  
  .prose a:hover {
    text-decoration: underline;
  }
  
  .dark .prose a {
    color: var(--primary-400);
  }
  
  .prose code {
    background-color: #f3f4f6;
    color: #dc2626;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  .dark .prose code {
    background-color: #374151;
    color: #fca5a5;
  }
  
  .prose pre {
    background-color: #1f2937;
    color: #f9fafb;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
  }
  
  .dark .prose pre {
    background-color: #111827;
  }
</style>
