---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
---

<Layout title="2048 Game">
  <Header />
  <main class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <section class="max-w-xl mx-auto py-10 px-4">
      <h1 class="text-3xl font-bold mb-4">2048</h1>
      <p class="mb-4 text-gray-600 dark:text-gray-300">Use arrow keys or swipe to combine tiles and reach 2048.</p>

      <div class="flex items-center justify-between mb-4">
        <div class="space-x-4">
          <span class="px-3 py-2 bg-white dark:bg-gray-800 rounded shadow border border-gray-200 dark:border-gray-700">Score: <span id="score">0</span></span>
          <span class="px-3 py-2 bg-white dark:bg-gray-800 rounded shadow border border-gray-200 dark:border-gray-700">Best: <span id="best">0</span></span>
        </div>
        <button id="new-game" class="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded">New Game</button>
      </div>

      <div id="board" class="bg-gray-200 dark:bg-gray-800 rounded-lg p-3 grid grid-cols-4 gap-3 touch-pan-y select-none"></div>

      <p id="status" class="mt-4 text-sm text-gray-500"></p>
    </section>
  </main>

  <style>
    #board { width: 100%; max-width: 480px; margin: 0 auto; }
    .cell { aspect-ratio: 1 / 1; border-radius: 0.5rem; display:flex; align-items:center; justify-content:center; font-weight:700; font-size: 1.25rem; }
  </style>

  <script>
    const boardEl = document.getElementById('board');
    const scoreEl = document.getElementById('score');
    const bestEl = document.getElementById('best');
    const statusEl = document.getElementById('status');
    const newBtn = document.getElementById('new-game');

    const size = 4;
    let grid = [];
    let score = 0;
    const bestKey = 'game2048_best';

    function colorFor(n){
      const map = {
        0: 'bg-gray-100 dark:bg-gray-700 text-transparent',
        2: 'bg-amber-50 text-amber-700',
        4: 'bg-amber-100 text-amber-700',
        8: 'bg-orange-200 text-orange-800',
        16: 'bg-orange-300 text-orange-900',
        32: 'bg-orange-400 text-white',
        64: 'bg-orange-500 text-white',
        128: 'bg-yellow-400 text-white',
        256: 'bg-yellow-500 text-white',
        512: 'bg-yellow-600 text-white',
        1024: 'bg-green-500 text-white',
        2048: 'bg-green-600 text-white'
      };
      return map[n] || 'bg-green-700 text-white';
    }

    function emptyCells(){
      const cells=[];
      for(let r=0;r<size;r++) for(let c=0;c<size;c++) if(grid[r][c]===0) cells.push([r,c]);
      return cells;
    }

    function addRandom(){
      const cells = emptyCells();
      if(cells.length===0) return;
      const [r,c] = cells[Math.floor(Math.random()*cells.length)];
      grid[r][c] = Math.random()<0.9 ? 2 : 4;
    }

    function setup(){
      grid = Array.from({length:size}, ()=> Array(size).fill(0));
      score = 0; updateScore();
      addRandom(); addRandom();
      draw();
      statusEl.textContent = '';
    }

    function draw(){
      boardEl.innerHTML = '';
      for(let r=0;r<size;r++){
        for(let c=0;c<size;c++){
          const v = grid[r][c];
          const cell = document.createElement('div');
          cell.className = `cell ${colorFor(v)}`;
          cell.textContent = v===0 ? '' : String(v);
          boardEl.appendChild(cell);
        }
      }
    }

    function compressLine(line){
      const arr = line.filter(x=>x!==0);
      for(let i=0;i<arr.length-1;i++){
        if(arr[i]===arr[i+1]){ arr[i]*=2; score+=arr[i]; arr.splice(i+1,1); }
      }
      while(arr.length<size) arr.push(0);
      return arr;
    }

    function rotate(times){
      // rotate grid clockwise times
      for(let t=0;t<times;t++){
        const g = Array.from({length:size}, ()=> Array(size).fill(0));
        for(let r=0;r<size;r++) for(let c=0;c<size;c++) g[c][size-1-r]=grid[r][c];
        grid = g;
      }
    }

    function move(dir){
      // 0=left,1=up,2=right,3=down
      const before = JSON.stringify(grid);
      if(dir===2){ rotate(2); dir=0; }
      if(dir===1){ rotate(3); dir=0; }
      if(dir===3){ rotate(1); dir=0; }
      // move left
      for(let r=0;r<size;r++) grid[r] = compressLine(grid[r]);
      // rotate back
      // dir is 0 now; inverse rotations
      // We rotated 1->3,3->1,2->2
      // To revert: if original was right (2), rotate 2 again; if up (1), rotate 1; if down (3), rotate 3
      // We can detect by param using a local variable
    }

    function moveDir(d){
      const prev = JSON.stringify(grid);
      let rot=0;
      if(d===2) rot=2; else if(d===1) rot=3; else if(d===3) rot=1; else rot=0;
      rotate(rot);
      for(let r=0;r<size;r++) grid[r] = compressLine(grid[r]);
      rotate((4-rot)%4);
      if(JSON.stringify(grid)!==prev){ addRandom(); updateScore(); draw(); checkState(); }
    }

    function updateScore(){
      scoreEl.textContent = String(score);
      const best = Math.max(Number(localStorage.getItem(bestKey)||'0'), score);
      localStorage.setItem(bestKey, String(best));
      bestEl.textContent = String(best);
    }

    function hasMoves(){
      if(emptyCells().length>0) return true;
      for(let r=0;r<size;r++) for(let c=0;c<size-1;c++) if(grid[r][c]===grid[r][c+1]) return true;
      for(let c=0;c<size;c++) for(let r=0;r<size-1;r++) if(grid[r][c]===grid[r+1][c]) return true;
      return false;
    }

    function checkState(){
      for(let r=0;r<size;r++) for(let c=0;c<size;c++) if(grid[r][c]===2048){ statusEl.textContent='You win!'; return; }
      if(!hasMoves()) statusEl.textContent='Game over';
    }

    document.addEventListener('keydown', (e)=>{
      if(['ArrowLeft','ArrowUp','ArrowRight','ArrowDown'].includes(e.key)){
        e.preventDefault();
        const d = {ArrowLeft:0,ArrowUp:1,ArrowRight:2,ArrowDown:3}[e.key];
        moveDir(d);
      }
    });

    // simple touch swipe
    let sx=0, sy=0;
    boardEl.addEventListener('touchstart', (e)=>{ const t=e.touches[0]; sx=t.clientX; sy=t.clientY; }, {passive:true});
    boardEl.addEventListener('touchend', (e)=>{
      const t=e.changedTouches[0]; const dx=t.clientX-sx; const dy=t.clientY-sy;
      if(Math.max(Math.abs(dx),Math.abs(dy))<30) return;
      const adx=Math.abs(dx), ady=Math.abs(dy);
      if(adx>ady) moveDir(dx>0?2:0); else moveDir(dy>0?3:1);
    });

    newBtn?.addEventListener('click', ()=> setup());

    // init board DOM
    (function initBoard(){
      for(let i=0;i<size*size;i++){
        const cell=document.createElement('div');
        cell.className='cell bg-gray-100 dark:bg-gray-700';
        boardEl.appendChild(cell);
      }
    })();

    setup();
  </script>
</Layout>


